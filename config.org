#+TITLE: My Doom Config
#+PROPERTY: header-args :tangle "config.el"


* Introduction

This is my config file for Doom Emacs. It reflects my primary needs for an
academic writing environment, with some coding.

Note: I have an SSD (~/~) and a HDD (~/HDD/~). Some files I prefer to save in my HDD. If you have only one device, some commands may be unnecessary (/e.g./ (~set org-directory '~/HDD/Org/~)

** Inspirations

- [[https://github.com/sunnyhasija/Academic-Doom-Emacs-Config]]
- [[https://gist.github.com/bdarcus/4c50f5c0eb49656298a9bb4c73e725ac]]


* Install
** GCC Emacs

*** Dependencies

#+begin_example
sudo apt install libxpm-dev libgif-dev libjpeg-dev libpng-dev libtiff-dev libx11-dev libncurses5-dev automake autoconf texinfo libgtk2.0-dev
sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa #Not sure if it is necessarily
sudo apt install gcc-10 g++-10 libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev
#+end_example
*** Cloning

#+begin_example
git clone git://git.savannah.gnu.org/emacs.git -b feature/native-comp
cd emacs
#+end_example

*** Installing

*OBS:* It takes time (~50min)

#+begin_example
export CC=/usr/bin/gcc-10 CXX=/usr/bin/gcc-10 % Important to fix dependencies not found
./autogen.sh
./configure  --with-mailutils --with-xwidgets --with-modules  --with-imagemagick --with-nativecomp
make -j2 NATIVE_FULL_AOT=1
make install
#+end_example

** Doom emacs

#+begin_example
rm -rf ~/.emacs.d/ # if already exist
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
~/.emacs.d/bin/doom upgrade
#+end_example


* Me

#+BEGIN_SRC elisp
(setq user-full-name "Gabriel Petrini"
      user-mail-address "gpetrinidasilveira@gmail.com")
#+END_SRC

#+RESULTS:
: gpetrinidasilveira@gmail.com


* Rudimentary Settings

#+BEGIN_SRC elisp
(setq package-native-compile t)
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4                                                         ; Set width for tabs
 uniquify-buffer-name-style 'forward      ; Uniquify buffer names
 window-combination-resize t                    ; take new window space from all other windows (not just current)
 x-stretch-cursor t
 )                                           ; Stretch cursor to the glyph width

(setq evil-want-fine-undo t                             ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                                    ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t      ; When there are lots of glyphs, keep them in memory
      ;; undo-limit 80000000                          ; Raise undo-limit to 80Mb
      truncate-string-ellipsis "…")               ; Unicode ellispis are nicer than "...", and also save /precious/ space

(delete-selection-mode 1)                             ; Replace selection when inserting text
(display-time-mode 1)                                   ; Enable time in the mode-line
;; (global-subword-mode 1)                           ; Iterate through CamelCase words
(setq line-spacing 0.3)                                   ; seems like a nice line spacing balance.
(setq org-roam-directory "/HDD/Org/notes/")
#+END_SRC


* Full Screen Emacs
I like to emacs to be fullscreen when I open it for the first time.
#+BEGIN_SRC elisp
(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

#+RESULTS:

* Modeline
I expect most of the documents I work on to be UTF - 8, So I don't want to see that taking up space unless the encoding is something different
#+BEGIN_SRC elisp
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))
(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

(setq doom-modeline-major-mode-icon t)
;; Whether display the colorful icon for `major-mode'.
;; It respects `all-the-icons-color-icons'.
(setq doom-modeline-major-mode-color-icon t)
;; Whether display the modification icon for the buffer.
;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
(setq doom-modeline-buffer-modification-icon t)
;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)
;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
(setq doom-modeline-mu4e nil)
;; Whether display the environment version.
(setq doom-modeline-env-version t)
#+END_SRC

#+RESULTS:

* An Integrated Academic Environment

This sets up Doom Emacs for an academic research and writing workflow, with
integrated bibliographic management, note-taking and document authoring.

Almost all of the initial work on this is now incorporated into Doom modules,
and you can install and set it all up with the following Doom modules and flags
in your ~init.el~ file:

 - :completion ivy or helm (I use ivy)
 - :lang org (+roamom+noter)
 - :tools biblio

 The above will give you the following:

  - ~ivy-bibtex~ or ~helm-bibtex~ and ~org-ref~ for bibliographic management
  - ~org-roam~ for zettlekasten-inspired note-taking, including of bibliographic
    notes (~org-roam-bibtex~ provides the glue here); also incorporates
    ~org-noter~ for notes synced to PDF files, so that you have a consistent
    environment to create, link, manage and access your notes
  - document authoring in either markdown mode (if you activate the ~markdown~
    module) or ~org~, including integrated citation access and insertion.

What follows is simply my customization of the above, which for now is
configuring the following variables.

The ~+biblio~ module provides these path directory and file variables and passes
them on to the relevant packages, so that one only has to set them once. There
is no need to set the path for bibliographic notes, as ~org-roam-bibtex~ will
handle that.

#+BEGIN_SRC elisp
(setq! +biblio-pdf-library-dir "/HDD/PDFs/")
#+END_SRC

While we're at it, let's set the default BibTeX dialect to BibLaTeX, which is
more appropriate for social sciences and humanities.

#+BEGIN_SRC elisp
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "biber %b"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

** Org-Ref
I initially started using this package in order to manage my citations. However, I soon found that this package required a lot of manual work for my liking. I still keep it in my config as it allows me to use citations in org-documents, if I am working on them directly. I can output these org-documents later to pdf or .docx later.


* Editor

#+BEGIN_SRC elisp
;; (setq doom-font (font-spec :family "Yanone Kaffeesatz" :size 30))
(setq  doom-font (font-spec :family "Fira Mono" :size 20))
;; (setq  doom-font (font-spec :family "Roboto Mono" :size 20))
(setq doom-theme 'doom-material)
(after! ox
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
;; Line numbers are pretty slow all around. The performance boost of
;; disabling them outweighs the utility of always keeping them on.
(setq display-line-numbers-type nil)
(setq org-support-shift-select t)
(after! org
  (setq org-image-actual-width '(300)))
(setq evil-normal-state-cursor '(box "orange")
      evil-insert-state-cursor '(bar "orange")
      evil-visual-state-cursor '(hollow "orange"))
#+END_SRC

** Splash-screen

#+begin_src elisp
(setq fancy-splash-image (concat doom-private-dir "./splash-images/black-hole-2.png"))
;; (setq +doom-dashboard-banner-file
;;       (expand-file-name "splash-images/black-hole2.png" doom-private-dir))
#+end_src
* Org-mode
#+begin_src elisp
(after! org
  (require 'org-bullets)  ; Nicer bullets in org-mode
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-agenda-files '("/HDD/Org/agenda.org")
        org-ellipsis " ▼ "
        org-log-done 'time
        org-enable-roam-support t
        org-directory "/HDD/Org/"
        notes-directory "/HDD/Org/notes"
        pdfs-directory "/HDD/PDFs/"
        refs-directory "/HDD/Org/zotero_refs.bib"
        org-src-window-setup 'current-window
        org-startup-folded 'overview
        org-hide-emphasis-markers t))
(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'tree))
(add-hook! org-mode :append #'org-appear-mode)

;; IMO, modern editors have trained a bad habit into us all: a burning
;; need for completion all the time -- as we type, as we breathe, as we
;; pray to the ancient ones -- but how often do you *really* need that
;; information? I say rarely. So opt for manual completion:
(require 'company)
(setq company-idle-delay 0.2
      company-minimum-prefix-length 3)
#+end_src

** Headers

#+begin_src elisp
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "output replace")
        (:exports . "results")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        ))
#+end_src

** UTF-8 check box

#+begin_src elisp
(after! org
  (setq org-html-checkbox-type 'unicode
        org-html-checkbox-types
        '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
                   (off . "<span class=\"task-todo\">&#x2610;</span>")
                   (trans . "<span class=\"task-in-progress\">[-]</span>")))))
#+end_src

* Graphviz

#+begin_src elisp
(use-package! graphviz-dot-mode
  :defer t
  :commands graphviz-dot-mode
  :mode ("\\.dot\\'" "\\.gz\\'"))
#+end_src
* Elfeed
** Pre-config

#+begin_src elisp
(use-package! elfeed-org
  :defer t
  :config
  (setq rmh-elfeed-org-files (list "/HDD/Org/rss/elfeed.org")))
#+end_src

** Keybindings

#+begin_src elisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "RET" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank)
(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)

(defun gps/elfeed-load-db-and-open ()
  "Load the elfeed db from disk before updating."
  (interactive)
  (elfeed)
  (elfeed-goodies/setup)
  (elfeed-db-load)
  (elfeed-search-update--force)
  (elfeed-update))

;;write to disk when quiting
(defun gps/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))

(defun gps/elfeed-mark-all-as-read ()
  (interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))
#+end_src

* Presentations

** Reveal.Js
#+BEGIN_SRC elisp :async t
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+END_SRC


* Grammar and Spelling

This just configures spelling and grammar checking support.

#+BEGIN_SRC elisp
(add-to-list 'ispell-aspell-dictionary-alist (ispell-aspell-find-dictionary "en_US"))
(setq ispell-program-name (executable-find "aspell")
      ispell-dictionary "en_US")
(setq flyspell-correct-popup t)
;; (setq langtool-language-tool-jar "/opt/LanguageTool-stable/LanguageTool-5.2/languagetool.jar")
;; (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*")
#+END_SRC


* Programming languages
#+begin_src elisp
(when (memq window-system '(mac ns x))
  (require 'exec-path-from-shell)
  (setq-default exec-path-from-shell-shell-name "/usr/bin/zsh")
  (exec-path-from-shell-initialize))
#+end_src



I find iedit absolutely indispensable when coding. In short: when you hit Ctrl-;, all occurrences of the symbol under the cursor (or the current selection) are highlighted, and any changes you make on one of them will be automatically applied to all others. It’s great for renaming variables in code, but it needs to be used with care, as it has no idea of semantics, it’s a plain string replacement, so it can inadvertently modify unintended parts of the code.

#+begin_src elisp :tangle no
(use-package! iedit
  :defer
  :config
  (set-face-background 'iedit-occurrence "Magenta")
  :bind
  ("C-;" . iedit-mode))
#+end_src

** Stata

[[https://www.louabill.org/Stata/ado-mode_install.html][Instalation instruction]]

Git repo was cloned, ~.git~ folder was removed and then moved to ~/scimax/user/~ folder.

ado-cus.el changed to include fake time

 Once you have setup the python environment following the steps above, do this in emacs:

    Install and load emacs-jupyter.el
    Ensure that you have activated the python environment where stata_kernel is available

    Add the following lines to your init.el:

#+BEGIN_SRC elisp
;; (when (functionp 'module-load)
;; associated jupyter-stata with stata (fixes fontification if using pygmentize for html export)
;;   (add-to-list 'org-src-lang-modes '("jupyter-stata" . stata))
;;   (add-to-list 'org-src-lang-modes '("Jupyter-Stata" . stata))
;; you **may** need this for latex output syntax highlighting
;; (add-to-list 'org-latex-minted-langs '(stata "stata"))
(setq inferior-STA-program-name "/usr/local/bin/jupyter-console")
#+END_SRC

#+RESULTS:
: /usr/local/bin/jupyter-console


** R

#+BEGIN_SRC elisp
(setq display-buffer-alist
      `(("*R Dired"
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.33)
         (reusable-frames . nil))
        ("*R"
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (window-width . 0.5)
         (reusable-frames . nil))
        ("*Help"
         (display-buffer-reuse-window display-buffer-below-selected)
         (side . left)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil)))
      )
(setq ess-style 'RStudio
      ;; auto-width
      ess-auto-width 'window
      ;; let lsp manage lintr
      ess-use-flymake nil
      ;; Stop R repl eval from blocking emacs.
      ess-eval-visibly 'nowait
      ess-use-eldoc nil
      ess-use-company nil
      )

(setq ess-use-flymake nil)
(setq ess-r--no-company-meta t)

(setq ess-ask-for-ess-directory t
      ess-local-process-name "R"
      ansi-color-for-comint-mode 'filter
      comint-scroll-to-bottom-on-input t
      comint-scroll-to-bottom-on-output t
      comint-move-point-for-output t)


;; ===========================================================
;; IDE Functions
;; ===========================================================

;; Bring up empty R script and R console for quick calculations
(defun ess-tide-scratch ()
  (interactive)
  (progn
    (delete-other-windows)
    (setq new-buf (get-buffer-create "scratch.R"))
    (switch-to-buffer new-buf)
    (R-mode)
    (setq w1 (selected-window))
    (setq w1name (buffer-name))
    (setq w2 (split-window w1 nil t))
    (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
        (R))
    (set-window-buffer w2 "*R*")
    (set-window-buffer w1 w1name)))
#+END_SRC



** Julia


[[https://discourse.julialang.org/t/working-setup-for-emacs-org-mode/41574/4][Source]]

** Python

In order to install dependencies, run ([[https://github.com/gjstein/emacs.d/blob/master/config/init-44-coding-python.el][Source]])

~pip install jedi flake8 importmagic autopep8 yapf~




Display inline images after running code

#+BEGIN_SRC elisp
;; Fix Warning "readline" message
(set-popup-rule! "^\\*Python*"  :side 'bottom :size .30) ;; Python console to the bottom

;; Disable native completion

(after! python

  (setq python-shell-completion-native-enable nil)
  (set-company-backend! 'python-mode 'elpy-company-backend)
  ;; (setq python-shell-interpreter "/usr/bin/python3"
  ;;       org-babel-python-command "/usr/bin/python3")
  )
(after! elpy
  (set-company-backend! 'elpy-mode
    '(elpy-company-backend :with company-files company-yasnippet)))

;; (add-hook 'python-mode-hook 'eglot-ensure)
#+END_SRC

#+RESULTS:


*** Company

#+begin_src elisp
(after! python
  (set-company-backend! 'python-mode 'elpy-company-backend))
(after! company
  (setq company-idle-delay 0
        company-tooltip-limit 10
        company-dabbrev-downcase nil
        company-show-numbers t
        company-minimum-prefix-length 3)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)

(set-company-backend! 'org-mode nil)
;; (use-package! company-tabnine
;;   :defer t
;;   )
;; (after! company
;;   (add-to-list 'company-backends 'company-tabnine))
#+end_src

** LSP

#+begin_src elisp
;; In case we get a wrong workspace root, we can delete it with lsp-workspace-folders-remove
(after! lsp-mode
  (setq lsp-auto-guess-root nil))
(set-popup-rule! "^\\*lsp-help" :side 'right :size .50 :select t :vslot 1)

;; Disable lsp flycheck checker and use flake8
(after! lsp-mode
  (setq lsp-diagnostic-package :none))

(after! flycheck
  (add-hook 'pyhon-mode-local-vars-hook
            (lambda ()
              (when (flycheck-may-enable-checker 'python-flake8)
                (flycheck-select-checker 'python-flake8)))))
;; (setq flycheck-disabled-checkers 'lsp)

(after! lsp-mode
  (setq lsp-eldoc-enable-hover nil
        lsp-signature-auto-activate nil
        ;; lsp-enable-on-type-formatting nil
        ;; lsp-enable-symbol-highlighting nil
        lsp-enable-file-watchers nil))
#+end_src

** Dynare

#+BEGIN_SRC elisp
;; (load! "dynare.el")
#+END_SRC

** Magit

#+begin_src elisp
(after! magit
  ;; (magit-wip-mode)
  (setq magit-save-repository-buffers nil
        ;; Don't restore the wconf after quitting magit
        magit-inhibit-save-previous-winconf t
        magit-log-arguments '("--graph" "--decorate" "--color")
        ;; magit-delete-by-moving-to-trash nil
        git-commit-summary-max-length 120))
#+end_src
* LaTeX

** Latex Process

#+BEGIN_SRC elisp
(load! "scimax-org-latex.el")

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "biber %b"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

** Labels

#+BEGIN_SRC elisp
(setq org-latex-prefer-user-labels t)
#+END_SRC

** Math support
#+begin_src elisp
(use-package! cdlatex
    :after (:any org-mode LaTeX-mode)
    :hook
    ((LaTeX-mode . turn-on-cdlatex)
     (org-mode . turn-on-org-cdlatex)))

(use-package! company-math
    :after (:any org-mode TeX-mode)
    :config
    (set-company-backend! 'org-mode 'company-math-symbols-latex)
    (set-company-backend! 'TeX-mode 'company-math-symbols-latex)
    (set-company-backend! 'org-mode 'company-latex-commands)
    (set-company-backend! 'TeX-mode 'company-latex-commands)
    (setq company-tooltip-align-annotations t)
    (setq company-math-allow-latex-symbols-in-faces t))
#+end_src

** Tufte booker
#+begin_src elisp
(add-to-list
 'org-latex-classes
 '(("tufte-book"
    "\\documentclass[a4paper, sfsidenotes, openany, justified]{tufte-book}"
    ("\\part{%s}" . "\\part*{%s}")
    ("\\chapter{%s}" . "\\chapter*{%s}")
    ("\\section{%s}" . "\\section*{%s}")
    ("utf8" . "utf8x")
    ("\\subsection{%s}" . "\\subsection*{%s}"))))
#+end_src
** Citeproc

Using citeproc-org currently requires adding its main rendering function (citeproc-org-render-references) to org-mode’s org-export-before-parsing-hook. This makes it incompatible with org-ref’s own citeproc, which also uses this hook. Org-ref’s citeproc is not activated by default, but if you have added its renderer function, orcp-citeproc, to your org-export-before-parsing-hook then it has to be removed before setting up citeproc-org.

citeproc-org provides the Emacs command citeproc-org-setup to add its renderer to org-export-before-parsing-hook, which can be used interactively by invoking

~M-x citeproc-org-setup~

during an Emacs session. After the command’s execution citeproc-org will remain active until the end of the session. If you want to use it on a permanent basis then add the following line to your .emacs or init.el file:

#+BEGIN_SRC elisp
(citeproc-org-setup)
#+END_SRC

* PDF tools

#+begin_src elisp
(setq +latex-viewers '(pdf-tools))
(setq pdf-annot-activate-created-annotations t
      pdf-view-display-size 'fit-width
      pdf-view-resize-factor 1.1)
#+end_src

* Org-noter

#+begin_src elisp
(use-package! org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the rclone mega
   org-noter-notes-search-path (list org-directory)
   org-noter-notes-window-location 'horizontal-split
   bibtex-completion-pdf-field "file"
   )
  )
#+end_src

* Org-ref
#+begin_src elisp
(use-package! org-ref
  :after (org-roam bibtex)
  :init
  (setq org-ref-default-bibliography refs-directory)
  (setq bibtex-completion-bibliography org-ref-default-bibliography)
  (setq bibtex-completion-library-path pdfs-directory)
  :config
  (setq org-ref-pdfs-directory pdfs-directory
        org-ref-completion-library 'org-ref-ivy-cite
        org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
        org-ref-default-bibliography (list refs-directory)
        org-ref-notes-directory org-directory
        org-ref-notes-function 'orb-edit-notes
        ))
#+end_src

#+begin_src elisp
(setq
 bibtex-completion-notes-path org-directory
 bibtex-completion-bibliography refs-directory
 bibtex-completion-pdf-field "file"
 bibtex-completion-notes-template-multiple-files
 (concat
  "${author-abbre} (${year}, ${journaltitle}): ${title}\n"
  "#+OPTIONS: toc:nil num:nil\n"
  "#+ROAM_KEY: cite:${key}\n"
  "Time-stamp: %<%Y-%m-%d>\n"
  "- tags :: ${keywords}\n"
  "\n* Backlinks\n"
  "\n* FISH-5SS\n"
  "|---------------------------------------------+-----|\n"
  "| <40>                                        |<50> |\n"
  "| *Background*                                  |     |\n"
  "| *Supporting Ideas*                            |     |\n"
  "| *Purpose*                                     |     |\n"
  "| *Originality/value (Contribution)*            |     |\n"
  "| *Relevance*                                   |     |\n"
  "| *Design/methodology/approach*                 |     |\n"
  "| *Results*                                     |     |\n"
  "| *(Interesting) Findings*                      |     |\n"
  "| *Research limitations/implications (Critics)* |     |\n"
  "| *Uncategorized stuff*                         |     |\n"
  "| *5SS*                                         |     |\n"
  "|---------------------------------------------+-----|\n"
  "\n* Specifics comments\n :PROPERTIES:\n :Custom_ID: ${=key=}\n :AUTHOR: ${author-or-editor}\n :JOURNAL: ${journal}\n :YEAR: ${year}\n :DOI: ${doi}\n :URL: ${url}\n :END:\n"
  "\n* PDF Highlights\n:PROPERTIES:\n :NOTER_DOCUMENT: %(orb-process-file-field \"${key}\")\n :END:\n"
  ))
#+end_src

* Org-roam-bibtex

#+begin_src elisp 
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq orb-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords" "journal" "year" "doi"))
  ;; (orb-process-file-keyword t)
  ;; (orb-file-field-extensions '("pdf" "epub" "html")
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "%<%Y-%m-%d-%H-%M-%S>-${=key=}"
           :head "#+TITLE: ${=key=}: ${title} (${year}, ${journal})
,#+OPTIONS: toc:nil num:nil
,#+ROAM_KEY: ${ref}
,#+ROAM_TAGS:
Time-stamp: %<%Y-%m-%d>
- tags :: ${keywords}

\n* Backlinks\n

\n* FISH-5SS
\n
|---------------------------------------------+-----|
| <40>                                        |<50> |
| *Background*                                  |     |
| *Supporting Ideas*                            |     |
| *Purpose*                                     |     |
| *Originality/value (Contribution)*            |     |
| *Relevance*                                   |     |
| *Design/methodology/approach*                 |     |
| *Results*                                     |     |
| *(Interesting) Findings*                      |     |
| *Research limitations/implications (Critics)* |     |
| *Uncategorized stuff*                         |     |
| *5SS*                                         |     |
|---------------------------------------------+-----|
\n* Specifics comments\n :PROPERTIES:\n :Custom_ID: ${=key=}\n :AUTHOR: ${author-or-editor}\n :JOURNAL: ${journal}\n :YEAR: ${year}\n :DOI: ${doi}\n :URL: ${url}\n :END:\n
\n* PDF Highlights\n:PROPERTIES:\n :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n :END:\n"
           :unnarrowed t))))
#+end_src

* Deft

#+begin_src elisp
(setq deft-directory notes-directory
      deft-recursive t
      deft-use-filter-string-for-filename t
      deft-default-extension "org"
      )
#+end_src

* Org-roam-server

#+begin_src elisp
;; (use-package! org-roam-protocol
;;   :after org-protocol)


(use-package! org-roam-server
  :after (org-roam server)
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-arrows "to"
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20)
  (defun org-roam-server-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (smartparens-global-mode -1)
    (org-roam-server-mode)
    (smartparens-global-mode +1)
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))
    )
  )
#+end_src

* Org-journal

#+begin_src elisp
(setq org-journal-file-type 'weekly
      org-journal-file-format "%Y-%m-%d.org"
      org-journal-file-header "#+TITLE: Weekly Journal\n#+STARTUP: folded"
      )
#+end_src

* GTD

** Capture templates

#+begin_src elisp
(setq org-capture-templates '(
                              ("t" "Todo [inbox]" entry
                               (file+headline "/HDD/Org/gtd/inbox.org" "Tasks")
                               "* TODO %i%?")
                              ("i" "Readings inbox" entry
                               (file+headline "/HDD/Org/gtd/readings.org" "Inbox")
                               "* %t %(org-cliplink-capture) %^g" :prepend t)
                              ))
#+end_src
** Refile

#+begin_src elisp
(setq org-refile-targets '(("/HDD/Org/gtd/projects.org" :maxlevel . 3)
                           ("/HDD/Org/gtd/readings.org" :maxlevel . 4)
                           ("/HDD/Org/gtd/someday.org" :level . 1)))
#+end_src

* Mu4e
** Instructions source

- [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][Mu4e for dummies]]

** Pre-requirements

#+begin_example
sudo apt install isync -f
mbsync -c ~/.config/mu4e/mbsyncrc -Dmn gpetrini-gmail
#+end_example


** Configuration
#+begin_src elisp
;; (add-to-list 'load-path "your/path/to/mu4e")
;; if you installed it using your package manager
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
;; if you built from source
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
;; (require 'smtpmail)
;; (add-hook 'message-send-hook 'org-mime-htmlize)
(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
      '(("smtp.gmail.com" 587 "gpetrinidasilveira@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)
(after! mu4e
  (setq user-mail-address "gpetrinidasilveira@gmail.com"
        user-full-name  "Gabriel Petrini"
        mu4e-maildir "/HDD/Mail"
        mu4e-root-maildir "/HDD/Mail"
        mu4e-get-mail-command "mbsync -c ~/.config/mu4e/mbsyncrc -a"
        mu4e-update-interval  300
        org-mu4e-convert-to-html t
        ;; mu4e-html2text-command "html2text -utf8 -width 72"
        ;; mu4e-html2text-command "w3m -T text/html"
        mu4e-main-buffer-hide-personal-addresses t
        mu4e-view-show-images t
        mu4e-attachment-dir  "~/Downloads"
        mu4e-sent-folder "/gmail/Sent"
        mu4e-drafts-folder "/gmail/Drafts"
        mu4e-trash-folder "/gmail/Trash"
        mu4e-maildir-shortcuts
        '(("/gmail/Inbox"      . ?i)
          ("/gmail/Sent Items" . ?s)
          ("/gmail/Drafts"     . ?d)
          ("/gmail/Trash"      . ?t)))
  )
#+end_src

** Org-msg

#+begin_src elisp
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))
(after! org-msg
  (setq org-msg-greeting-name-limit 3
        org-msg-default-alternatives '(text html)
        org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t tex:dvipng"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-recipient-names '(("gpetrinidasilveira@gmail.com" . "Gabriel Petrini"))
        org-msg-greeting-name-limit 4
        org-msg-convert-citation t
        org-msg-signature "
 Regards,

 ,#+begin_signature
 -- *Gabriel Petrini da Silvera*\n
PhD Student at University of Campinas - Brazil\n
 /Sent from Emacs with mu4e and org-msg/
 ,#+end_signature"))
#+end_src

* Epub

#+begin_src elisp
(use-package! nov
  :defer t
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (concat doom-cache-dir "nov-places")))
#+end_src
